name: C/C++ CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest
    container: debian:trixie

    steps:
    - uses: actions/checkout@v1
    - name: update
      run: apt update
    - name: deps
      run: |
        apt install -y \
          bison \
          build-essential \
          cmake \
          debootstrap \
          debhelper \
          dh-dkms \
          dkms \
          elfutils \
          flex \
          git \
          grub-efi-amd64-bin \
          grub-pc-bin \
          libdrm-dev \
          libelf-dev \
          libfl-dev \
          libfreetype6-dev \
          libgif-dev \
          libicns-dev \
          libicu-dev \
          libinput-dev \
          libjpeg-dev \
          libncurses-dev \
          libopenexr-dev \
          libpng-dev \
          libtiff-dev \
          libudev-dev \
          libwebp-dev \
          linux-headers-amd64 \
          mtools \
          ninja-build \
          squashfs-tools \
          sudo \
          xorriso \
          zlib1g-dev \
          --fix-missing
    - name: fix kernel headers path
      run: |
        HOST_KERNEL=$(uname -r)
        HEADER_DIR=$(ls -d /usr/src/linux-headers-* | head -n1)
        mkdir -p /lib/modules/$HOST_KERNEL
        ln -s $HEADER_DIR /lib/modules/$HOST_KERNEL/build
    - name: mkdir
      run: mkdir generated.x86
    - name: directory exception
      run: cd generated.x86 && git config --global --add safe.directory /__w/Vitruvian/Vitruvian
    - name: sumodule update
      run: git submodule update --init --recursive
    - name: setup environment
      run: cd generated.x86 && export TERM=xterm-256color && ../build/scripts/setupenv.sh
    - name: list nexus directory
      run: ls -la /__w/Vitruvian/Vitruvian/src/system/kernel/nexus
    - name: configure generated.x86
      run: cd generated.x86 && ../configure
    - name: ninja build
      run: cd generated.x86 && ninja
    - name: generate deb 
      run: cd generated.x86 && cpack
    - name: prepare fake mounts
      run: |
        CHROOT=generated.x86/LIVE_BOOT/chroot
        sudo mkdir -p $CHROOT/{proc,sys,dev,run,tmp}
        # finti mount point (symlink a /dev/null o directory vuote)
        sudo touch $CHROOT/proc/fake
        sudo touch $CHROOT/sys/fake
        sudo touch $CHROOT/dev/fake
        sudo touch $CHROOT/run/fake
        sudo touch $CHROOT/tmp/fake
    - name: generate ISO
      run: cd generated.x86 && export TERM=xterm-256color && ../build/scripts/mkiso.sh || true
