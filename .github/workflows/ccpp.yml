name: Build Vitruvian ISO

on: [push]

jobs:
  iso-build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install all required build dependencies
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            bison build-essential cmake debootstrap debhelper \
            dh-dkms dkms elfutils flex git \
            grub-efi-amd64-bin grub-pc-bin \
            libdrm-dev libelf-dev libfl-dev libfreetype6-dev \
            libgif-dev libicns-dev libicu-dev libinput-dev \
            libjpeg-dev libncurses-dev libopenexr-dev libpng-dev \
            libtiff-dev libudev-dev libwebp-dev \
            linux-headers-$(uname -r) \
            mtools ninja-build squashfs-tools sudo xorriso zlib1g-dev \
            fakeroot devscripts lintian wget

      # Mark GitHub workspace as safe
      - name: Configure git safe.directory
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      # Initialize submodules recursively
      - name: Init submodules
        run: git submodule update --init --recursive

      # Build buildtools using Ninja
      - name: Build buildtools
        run: |
          mkdir -p buildtools
          cd buildtools
          cmake -DBUILDTOOLS_MODE=1 .. -G Ninja
          ninja
          cd ..

      # Create output build directory
      - name: Create build directory
        run: mkdir -p generated.x86

      # Setup build environment
      - name: Setup environment
        run: cd generated.x86 && export TERM=xterm-256color && ../build/scripts/setupenv.sh

      # Configure project using the Vitruvian toolchain
      - name: Configure with toolchain
        run: |
          cd generated.x86
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=../build/toolchain/vitruvian_toolchain.cmake \
            -G Ninja

      # Build the project using Ninja
      - name: Ninja build
        run: cd generated.x86 && ninja

      # Generate .deb packages
      - name: Generate deb packages
        run: cd generated.x86 && cpack

      # Make ISO script executable
      - name: Make mkiso script executable
        run: chmod +x ./build/scripts/mkiso.sh

      # Run mkiso script to generate ISO
      - name: Run mkiso script
        run: cd generated.x86 && ../build/scripts/mkiso.sh

      # Generate checksums for ISO files
      - name: Generate ISO checksum
        run: |
          cd generated.x86/LIVE_BOOT
          for iso in *.iso; do
            sha256sum "$iso" > "$iso.sha256"
          done

      # Upload ISO artifacts
      - name: Upload Vitruvian ISO
        uses: actions/upload-artifact@v4
        with:
          name: Vitruvian-ISO
          path: |
            generated.x86/LIVE_BOOT/*.iso
            generated.x86/LIVE_BOOT/*.sha256

      # Generate checksums for DEB packages
      - name: Generate DEB checksums
        run: |
          cd generated.x86
          for deb in *.deb; do
            sha256sum "$deb" > "$deb.sha256"
          done

      # Upload DEB packages
      - name: Upload Vitruvian DEB packages
        uses: actions/upload-artifact@v4
        with:
          name: Vitruvian-DEB
          path: |
            generated.x86/*.deb
            generated.x86/*.sha256
            
